import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { ConfigProvider } from "./..";
import { useThemeMode } from 'antd-style';
import classNames from 'classnames';
import { createRef, memo } from 'react';
import CopyButton from "./components/CopyButton";
import HighLighter from "./components/HighLighter";
import LanguageTag from "./components/LanguageTag";
import { useKeyDownCopyEvent } from "./hooks/useKeyDownCopyEvent";
import { HIGHLIGHT_LANGUAGES } from "./hooks/useShiki";
import { useStyles } from "./style";
import { THEME_AUTO } from "./theme";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var BaseHighlight = /*#__PURE__*/memo(function (props) {
  var children = props.children,
    style = props.style,
    className = props.className,
    _props$lineNumber = props.lineNumber,
    lineNumber = _props$lineNumber === void 0 ? false : _props$lineNumber,
    _props$copyable = props.copyable,
    copyable = _props$copyable === void 0 ? true : _props$copyable,
    _props$theme = props.theme,
    outTheme = _props$theme === void 0 ? THEME_AUTO : _props$theme,
    _props$language = props.language,
    language = _props$language === void 0 ? 'tsx' : _props$language,
    _props$showLanguage = props.showLanguage,
    showLanguage = _props$showLanguage === void 0 ? true : _props$showLanguage,
    _props$type = props.type,
    type = _props$type === void 0 ? 'block' : _props$type,
    onCopy = props.onCopy;
  // 当为 auto 的时候，根据系统主题来判断
  var _useThemeMode = useThemeMode(),
    appearance = _useThemeMode.appearance;
  var ProviderTheme = appearance === 'dark' ? 'dark' : 'light';
  var theme = outTheme === THEME_AUTO ? ProviderTheme : outTheme;
  var _useStyles = useStyles({
      theme: theme,
      type: type
    }),
    styles = _useStyles.styles;
  var codeRef = /*#__PURE__*/createRef();
  useKeyDownCopyEvent(codeRef, onCopy);
  return /*#__PURE__*/_jsxs("div", {
    ref: codeRef,
    tabIndex: -1,
    style: style,
    className: classNames(styles.container, className),
    children: [copyable && /*#__PURE__*/_jsx(CopyButton, {
      onCopy: onCopy,
      theme: theme,
      content: children
    }), showLanguage && language && /*#__PURE__*/_jsx(LanguageTag, {
      theme: theme,
      children: language.toLowerCase()
    }), /*#__PURE__*/_jsx(HighLighter, {
      lineNumber: lineNumber,
      language: language,
      theme: theme,
      children: children
    })]
  });
});
var Highlight = function Highlight(props) {
  return /*#__PURE__*/_jsx(ConfigProvider, {
    children: /*#__PURE__*/_jsx(BaseHighlight, _objectSpread({}, props))
  });
};
export { HIGHLIGHT_LANGUAGES, Highlight };